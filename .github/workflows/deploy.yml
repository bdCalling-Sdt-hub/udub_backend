# name: Deploy Node.js with TypeScript on EC2

# on:
#   push:
#     branches:
#       - 'main'

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3 # Checkout the repository code
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '20.x'
#       - name: Install Dependencies
#         run: npm ci --ignore-scripts
#       - name: Install TypeScript Compiler
#         run: npm install -g typescript # Install TypeScript globally
#       - name: Build Project
#         run: npm run build # Run tsc to compile the TypeScript code
#       - name: Prepare Deployment Files
#         run: |
#           # Archive necessary files into a tarball
#           tar -czf app.tar.gz dist package.json package-lock.json

#           # Debugging: List files to ensure app.tar.gz is created
#           ls -l app.tar.gz  # This will confirm if app.tar.gz exists

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build # This job depends on the 'build' job

#     steps:
#       - name: Configure SSH
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#         run: |
#           # Set up SSH keys for accessing EC2
#           mkdir -p ~/.ssh
#           echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

#       - name: Deploy to EC2
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#           ENV_VARS_JSON: ${{ secrets.ENV_VARS_JSON }}
#         run: |
#           # Check if app.tar.gz exists before transferring
#           if [ -f "app.tar.gz" ]; then
#             echo "app.tar.gz found, proceeding with deployment."
#           else
#             echo "app.tar.gz not found. Exiting."
#             exit 1
#           fi

#           # Copy the tarball to EC2
#           scp app.tar.gz $EC2_USER@$EC2_HOST:/home/application/backend/app.tar.gz

#           # SSH into EC2 to perform the deployment
#           ssh $EC2_USER@$EC2_HOST << 'EOF'
#             # Clean up and create the necessary directory on EC2
#             rm -rf /home/application/backend && mkdir -p /home/application/backend
#             tar -xzf /home/application/backend/app.tar.gz -C /home/application/backend
#             cd /home/application/backend

#             # Decode and set environment variables from GitHub Secrets
#             echo "$ENV_VARS_JSON" | jq -r 'to_entries | .[] | "export \(.key)=\(.value)"' >> .env

#             # Install production dependencies
#             npm ci --only=production

#             # Manage the application with PM2 (delete old process and start the new one)
#             pm2 delete nodejs-backend || true
#             pm2 start dist/server.js --name nodejs-backend
#           EOF

name: Deploy Node.js with TypeScript on EC2

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3 # Checkout the repository code

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.15' # Use the specified Node.js version

      - name: Install Dependencies
        run: npm install --frozen-lockfile # Install all dependencies from package-lock.json

      - name: Install TypeScript Compiler
        run: npm install -g typescript # Install TypeScript globally

      - name: Build Project
        run: npm run build # Compile TypeScript code using tsc

  deploy:
    runs-on: ubuntu-latest
    needs: build # This job depends on the successful completion of the 'build' job

    steps:
      - uses: actions/checkout@v3 # Checkout the repository code again for deployment

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.15' # Same Node.js version as the build job

      - name: Install Dependencies
        run: npm install --frozen-lockfile # Install all dependencies

      - name: Build Project
        run: npm run build # Ensure the project is built before deployment

      # Configure SSH access to the EC2 instance
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # SSH key for access
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # Set the correct permissions for the private key
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts  # Add the EC2 host to known hosts

      # Deploy the application to EC2 using `rsync`
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # EC2 Host URL or IP address
          EC2_USER: ${{ secrets.EC2_USER }} # EC2 SSH username (e.g., ubuntu)
        run: |
          # Create deployment directory on EC2
          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/app"

          # Copy the entire project to EC2 using `rsync`
          rsync -avz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            . $EC2_USER@$EC2_HOST:~/app/  # Ensure only relevant files are copied

          # Install production dependencies on EC2
          ssh $EC2_USER@$EC2_HOST "cd ~/app && npm install --frozen-lockfile --production"

          # Stop the existing PM2 process if it exists
          ssh $EC2_USER@$EC2_HOST "pm2 delete nodejs-app || true"  # Ensures no errors if the process doesn't exist

          # Start the application with PM2
          ssh $EC2_USER@$EC2_HOST "cd ~/app && pm2 start dist/server.js --name nodejs-app"
